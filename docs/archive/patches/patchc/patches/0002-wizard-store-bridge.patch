*** Begin Patch
*** Update File: frontend/src/features/wizard/mode/bridge/useWizardStoreBridge.ts
@@
-import { useCallback, useEffect, useMemo, useRef, useState } from 'react';
+import { useCallback, useEffect, useMemo, useRef, useState } from 'react';
+import { useWizardMode } from '../ModeContext';
 
 /**
  * Patch 6-c: Single source of truth for Modern wizard state that
  * - defers localStorage reads until hydrated
  * - isolates LS key per mode to avoid Classic collisions
  * - provides safe getters/setters used by ModernEngine & bridges
  */
 
-export function useWizardStoreBridge() {
-  const [hydrated, setHydrated] = useState(false);
-  useEffect(() => setHydrated(true), []);
+export function useWizardStoreBridge() {
+  const { storageKey, hydrated } = useWizardMode();
 
   const getWizardData = useCallback(() => {
-    if (!hydrated) {
-      console.log('[useWizardStoreBridge.getWizardData] NOT HYDRATED - returning empty');
-      return { formData: {}, verifiedData: {}, docType: 'grant_deed' };
-    }
-    try {
-      const raw = localStorage.getItem('deedWizardDraft');
-      if (!raw) return { formData: {}, verifiedData: {}, docType: 'grant_deed' };
-      const parsed = JSON.parse(raw);
-      console.log('[useWizardStoreBridge.getWizardData] HYDRATED - loaded from localStorage:', parsed);
-      return parsed || { formData: {}, verifiedData: {}, docType: 'grant_deed' };
-    } catch {
-      return { formData: {}, verifiedData: {}, docType: 'grant_deed' };
-    }
+    if (!hydrated) {
+      console.log('[useWizardStoreBridge.getWizardData] NOT HYDRATED - returning empty');
+      return { formData: {}, verifiedData: {}, docType: 'grant_deed' };
+    }
+    try {
+      const raw = localStorage.getItem(storageKey);
+      if (!raw) return { formData: {}, verifiedData: {}, docType: 'grant_deed' };
+      const parsed = JSON.parse(raw);
+      console.log('[useWizardStoreBridge.getWizardData] HYDRATED - loaded from localStorage:', parsed);
+      return parsed || { formData: {}, verifiedData: {}, docType: 'grant_deed' };
+    } catch {
+      return { formData: {}, verifiedData: {}, docType: 'grant_deed' };
+    }
   }, [hydrated
-  ]);
+  , storageKey]);
 
   const updateFormData = useCallback((patch: Record<string, any>) => {
-    if (!hydrated) {
-      console.log('[useWizardStoreBridge.updateFormData] NOT HYDRATED - blocked write');
-      return;
-    }
-    try {
-      const current = getWizardData();
-      const merged = {
-        ...current,
-        formData: { ...(current.formData || {}), ...patch },
-        timestamp: new Date().toISOString(),
-      };
-      localStorage.setItem('deedWizardDraft', JSON.stringify(merged));
-      console.log('[useWizardStoreBridge.updateFormData] Saved to localStorage');
-    } catch (e) {
-      console.warn('Failed to update formData', e);
-    }
+    if (!hydrated) {
+      console.log('[useWizardStoreBridge.updateFormData] NOT HYDRATED - blocked write');
+      return;
+    }
+    try {
+      const current = getWizardData();
+      const merged = {
+        ...current,
+        formData: { ...(current.formData || {}), ...patch },
+        timestamp: new Date().toISOString(),
+      };
+      localStorage.setItem(storageKey, JSON.stringify(merged));
+      console.log('[useWizardStoreBridge.updateFormData] Saved to localStorage');
+      // notify listeners if any
+      window.dispatchEvent(new CustomEvent('wizard:formDataUpdated', { detail: merged }));
+    } catch (e) {
+      console.warn('Failed to update formData', e);
+    }
-  }, [hydrated, getWizardData]);
+  }, [hydrated, getWizardData, storageKey]);
 
   const markVerified = useCallback((verifiedData: Record<string, any>) => {
-    if (!hydrated) return;
-    try {
-      const current = getWizardData();
-      const merged = {
-        ...current,
-        verifiedData: { ...(current.verifiedData || {}), ...verifiedData },
-        formData: { ...(current.formData || {}), propertyVerified: true },
-        timestamp: new Date().toISOString(),
-      };
-      localStorage.setItem('deedWizardDraft', JSON.stringify(merged));
-    } catch {}
+    if (!hydrated) return;
+    try {
+      const current = getWizardData();
+      const merged = {
+        ...current,
+        verifiedData: { ...(current.verifiedData || {}), ...verifiedData },
+        formData: { ...(current.formData || {}), propertyVerified: true },
+        timestamp: new Date().toISOString(),
+      };
+      localStorage.setItem(storageKey, JSON.stringify(merged));
+    } catch {}
-  }, [hydrated, getWizardData]);
+  }, [hydrated, getWizardData, storageKey]);
 
   const isPropertyVerified = useCallback(() => {
-    if (!hydrated) {
-      console.log('[useWizardStoreBridge.isPropertyVerified] NOT HYDRATED - returning false');
-      return false;
-    }
-    const { formData = {}, verifiedData = {} } = getWizardData();
-    console.log('[useWizardStoreBridge.isPropertyVerified] Checking:', '\\n  - wizardData:', { formData, verifiedData });
-    const result = !!(formData.propertyVerified || verifiedData.apn || verifiedData.fullAddress);
-    console.log('  - RESULT:', result);
-    return result;
+    if (!hydrated) {
+      console.log('[useWizardStoreBridge.isPropertyVerified] NOT HYDRATED - returning false');
+      return false;
+    }
+    const { formData = {}, verifiedData = {} } = getWizardData();
+    console.log('[useWizardStoreBridge.isPropertyVerified] Checking:', '\\n  - wizardData:', { formData, verifiedData });
+    const result = !!(formData.propertyVerified || verifiedData.apn || verifiedData.fullAddress);
+    console.log('  - RESULT:', result);
+    return result;
-  }, [hydrated, getWizardData]);
+  }, [hydrated, getWizardData]);
 
   return { hydrated, getWizardData, updateFormData, markVerified, isPropertyVerified };
 }
*** End Patch
